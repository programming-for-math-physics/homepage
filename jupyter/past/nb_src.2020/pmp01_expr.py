""" md

# {C.inc_section}. 式

Pythonの色々な式について学ぶ.

# {C.section}-{C.inc_subsection}. 算術演算や比較式

以下を `Shift + Enter` で実行してみよ.

"""

""" exec-code-box """
1 + 2

""" md

以下でも同様で, セルに何かが入力されていたら`Shift + Enter` で実行してみよう.

心構えとしては, 何も考えずに `Shift + Enter` を叩き続けても無意味なので, 

 * 「正しいPythonの式や文」の知識を広げているという(英語の勉強を例文を読みながらやっているときのような)意識で読む
 * 実行したら出てくる結果を予測しながら実行する

途中からは, 自分でセルに(正しく)プログラムを入力する演習が始まる.
"""

""" exec-code-box """
3 * 4

""" md

最もよく使うのは以下のような数学でもよく現れる式.
式の優先度は普段数学でおなじみの規則で処理してくれる
"""

""" exec-code-box """
5 + 6 * 7

""" md

もちろん小数点付きの数(__浮動小数点数__)も使える
"""

""" exec-code-box """
1.2 * 3.4

""" md

割り算をすると結果はひとりでに浮動小数点数になる

"""

""" exec-code-box """
89 / 10

""" md

// で, __端数切り捨ての割り算__ になる
"""

""" exec-code-box """
89 // 10

""" md

絶対値が非常に小さい(大きい)浮動小数点数は, いわゆる指数表記が便利で, $a \times 10^b$ を $a$e$b$ のように書く. 以下は, $1.2 \times 10^{{15}}$ ということ

"""

""" exec-code-box """
1.2e15 

""" md

** は累乗の演算子. $a$ `**` $b$ で $a^b$ が計算できる
"""

""" exec-code-box """
3 ** 4

""" md

結果が巨大になってもOK (これは実は当たり前ではなく, 多くのプログラミング言語で備わっている整数は, 扱える数の範囲が決まっておりそれを越えるとエラーになるか, 意図しない結果になる
"""

""" exec-code-box """
56 ** 78

""" md

複素数も使える. `1j` がいわゆる虚数単位 ($\sqrt{{-1}}$). 
数字の後に`j`をつければ純虚数.

"""

""" exec-code-box """
2j * 3j

""" exec-code-box """
(1 + 1.73j) ** 3

""" md

その他の色々な演算子

余り
"""

""" exec-code-box """
89 % 10

""" md

その他の色々な演算子

比較. これらを評価(計算)すると比較結果として真理値 (True または False)が得られる

$ < $
"""

""" exec-code-box """
1 < 2

""" md

$ \leq $ は `<=`
"""

""" exec-code-box """
1 <= 2

""" md

$ > $
"""

""" exec-code-box """
1 > 2

""" md

$ \geq $ は `>=`
"""

""" exec-code-box """
1 >= 2

""" md

__要注意:__ 一致するかどうかの比較 ($ = $) は, `=` ではなく `==` 
"""

""" exec-code-box """
1 == 2

""" md

`=` は後に出てくる「変数への代入」の記号. 以下はエラーになる!
"""

""" error-code-box """
1 = 2

""" md

# {C.section}-{C.inc_subsection}. 関数の呼び出し

$x$の絶対値$|x|$, $x$と$y$の最大値, 最小値, $x$の四捨五入, はそれぞれ以下のように書ける.
"""

""" exec-code-box """
abs(-5)

""" exec-code-box """
max(3, 4)

""" exec-code-box """
min(3, 4)

""" exec-code-box """
round(1.49)

""" exec-code-box """
round(1.5)

""" md 

以下は予測と違うかも知れない. 2.5 ピッタリのつもりで書いても, コンピュータでは数を2進数で表す関係で僅かな誤差が出ることがある. その結果以下のような結果になることがある.

"""

""" exec-code-box """
round(2.5)

""" md

ここでのポイントは, Python言語では色々な計算がこのような共通の記法

関数名(式, 式, 式, ...)

で書ける(絶対値の関数名はabs, 最小値の関数名はmin, ...)ということ. 数学でおなじみの記法とは違うこともある. 

# 用語

 * このように書かれた式を__「関数適用(式)」__とか__「関数呼び出し(式)」__と言う. 
特にプログラミングの世界では後者の呼び方をすることが多く, 関数呼び出し式を評価することを, 関数を__「呼び出す」__などという.

 * 関数を呼び出す際の入力値 (abs(-5)の-5, min(3, 4)の3や4)のことを, その関数呼び出しの__「引数(argument)」__という. また, 関数呼び出しabsに, 引数-5を__「渡した」__などという.

 * 関数を呼び出した結果の値(abs(-5)であれば5, min(3, 4)であれば3)のことをその関数の__「返り値(return value)」__という. また, abs(-5)という関数呼び出しが5という値を__「返した」__などという

一般にプログラミングの世界では

```
abs(-5)
```

などの関数を含んだ式を計算することを, 色々な「動作」を想起させる言葉で表現する. 

この式は, 

 * absに, -5を__渡して__, __呼び出す__
 * (呼び出された)absは, 5を__返す__

という具合. 数学で $|x|$ や$\sin x$と書いた時にそのような表現をする人はいないし, そうする必要もない. なぜプログラミングではそうしたくなるのか(そう思っておくことが有用なのか)は後にわかる. 今は, 関数の式を見るとついそういうことをイメージしてしまう, 変わった人種が世の中には(ほぼ, プログラミングをする人の数だけ)いると思っていれば良い.

これまでに見せた算術式や比較式, 関数呼び出し式はすべて式の一種で両者を自由に組み合わせて複雑な式を作ることができる.

"""

""" exec-code-box """
min(abs((1+2j)**10), abs((1+1j)**20))

""" md

# {C.section}-{C.inc_subsection}. モジュール(機能)のimport (輸入)

Pythonには様々な関数が備わっており, 高校までの数学で普段使うような関数は大概備わっている. ただしそれらはある「おまじない」を唱えないと使えない.

例えば$\sin$関数くらい使えるだろうと思って以下を実行するとエラーになる

"""

""" error-code-box """
sin(3.0)

""" md

これを解決するためには以下の「おまじない」を唱える

"""

""" exec-code-box """
import math

""" md

このおまじないを唱えると, `math.sin` という名前でで sin関数をつけるようになる

"""

""" exec-code-box """
math.sin(3.0)

""" md

ポイントは二つで,

 * `import math` によって `math` という__モジュール__ (あるひとかたまりの機能を備えた「部品」だと思えば良い)を実行中のプログラムに「仕入れ」てくる. 

 * `math`というモジュールには数学でよく使う関数($\sin$, $\cos$など)が揃っている. それらにアクセスするためには, `math.sin`, `math.cos` のように, モジュール名.関数名という表記を用いる. 

比喩としては, モジュール名(math)が名字, その中の関数名が名前に相当する. 自分の家族でない人を呼ぶときは, フルネームで呼ぶのが基本, ということ. それをせずに, ただただ「あきこちゃん」と呼んでも, 矢田亜希子のことなのか, 和田アキ子のことなのかわからない(または紛らわしい)ので, こうするのが理にかなっている.

色々な数学の関数を試しに使って見る.

なお, `import math`をあるセルで実行したら他のセルでも`math`モジュールが使えるようになる. 上記のセルを実行していれば以下は(エラーにならずに)実行できるはずである. エラーになったら`import math`を実行せよ.

"""

""" md

$\cos$
"""

""" exec-code-box """
math.cos(3.14)

""" md

$\sin$
"""

""" exec-code-box """
math.sin(1.57)

""" md

$\sqrt{{x}}$
"""

""" exec-code-box """
math.sqrt(1.44)

""" md

$e^x$
"""

""" exec-code-box """
math.exp(3.1)

""" md

$\log_e x$
"""

""" exec-code-box """
math.log(10)

""" md

Pythonには多数のモジュールが最初から提供されており, すべてmathモジュールと同様の手順で使えるようになる. 

 * Pythonに組み込みのモジュール一覧は https://docs.python.org/ja/3/library/index.html
 * 組み込みで提供されていないが, 追加でインストールするなどすれば使えるようになるモジュールは, 無数にある. この初年次ゼミで使う, VPython, numpy, scipy, matplotlibなどもすべて, モジュールとして提供されている.

"""


""" xxxmd

なおこのへんで一応注意しておくと, 数学だと普通は $\cos x$と書くところがPython (プログラミング言語)では, `math.cos(x)`  (括弧が必須)だったり, 数学とにているが違うところが各所にある. 

そこは「郷に入っては郷に従え」で, あるプログラミング言語が文法を定めている以上それに厳密に従わなくてはならない. 人間のように書いた人の意図を読んで気を利かせてくれるということはない.

"""

""" md

# {C.section}-{C.inc_subsection}. 様々なimportの方法

あるモジュールを使いたくなったら, `import モジュール名` とするのが基本だが, 他のimportの記法もある. 何も面倒な使い分けをしなくてもこの基本のやり方で全て押し通せば充分なのだが, この初年次ゼミで使う numpy, matplotlib, vpythonはどういうわけか世の中の本や紹介記事ではどれも特定の記法でやっているので, このゼミでもそれらに合わせる. そこでそれら記法を一応説明しておく.

以下は全て, mathモジュールをimportし, その中の`pi`や`sin`をアクセスるための記法である.

"""

""" md

1. 普通
"""

""" exec-code-box """
import math
math.pi
math.sin(math.pi/2)

""" md

2. mathの代わりに自分の好きな名前(普通は短い名前)で使えるようにする
"""

""" exec-code-box """
import math as m
m.pi
m.sin(m.pi/2)

""" md

3. モジュール名を省略する

"""

""" exec-code-box """
from math import *
pi
sin(3.0)

""" md

4. モジュール名を省略する. ただし, 特定の名前だけを使えるようにする

"""

""" exec-code-box """
from math import pi,sin
pi
sin(3.0)

""" md

なお, 3.のやり方は一見すると便利そうであるが, 複数のモジュールから同じ名前が提供されている場合があり, そのような場合に名前衝突がおき, 意図しないモジュールの機能を使ってしまう危険があるのであまり無闇に使うべきではない.

本初年次ゼミで使う, numpy, matplotlib, vpythonはそれぞれ以下のようにimportするのが, 世の中(世の中でこれらについて説明してある文書)での慣例になっているようである.
"""

""" exec-code-box """
import numpy as np
import matplotlib.pyplot as plt
from vpython import *

""" md

# {C.section}-{C.inc_subsection}. dir関数

`dir(...)` という特別な関数は, あるモジュールの中にどのような関数(後述するが正確には「変数」)が入っているか, 比喩で言うならば家族構成(家族に何君または何ちゃんがいるか)を列挙してくれる. たとえば`math`の中には, $\cos$, $\sin$, $\exp$, $\log$以外にも色々あるはずだ, さて何があるのだろうと思ったら以下のようにする.

"""

""" exec-code-box """
dir(math)

""" md

見ての通り, `acos` ($\arccos$), `ceil` ($\lceil x \rceil$), `sinh` ($\sinh$)など様々な関数があることがわかる.

`dir`関数は普段数学で使う関数とはだいぶ趣きが異なるが, 要するに, なにか入力(今の場合, モジュールそのものが入力であった)を与えるとそれに応じて結果(今の場合, 「そのモジュールに含まれた関数名すべて」)が定まるあらゆるものが関数なので, プログラミング言語ではそれらを特に区別なく全て関数と呼んでいる.

"""

""" md

# {C.section}-{C.inc_subsection}. help関数

あるモジュールや関数に対して, `help(...)` を実行すると(これもまた関数), 与えた入力に関するヘルプ情報(関数であればその使い方など)を表示してくれる.

"""

""" exec-code-box """
help(math.sin)


""" md

# 問題 {C.inc_problem}: 算術式とimportの練習

* https://docs.python.org/ja/3.6/library/math.html を見て Pythonで, $\log$ を計算する関数を調べよ
* help 関数を使ってその関数の情報を表示せよ
* それらができたら

$$ \log(e^{{10}}) $$

を計算する式を書いて計算してみよ(答えは当然10に近くなるはずである)

"""

""" write-code-box """

""" answer-code-box """

math.log(math.e ** 10)


